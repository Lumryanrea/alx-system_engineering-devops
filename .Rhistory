print()
print('Hello world')
print(adam)
print(adam)
adam = jerm + ruth;
print("adam")
print(adam)
print(jerm)
print(jerm + ruth)
print(jerm + ruth)
ruth = 5678
print(ruth)
print(jerm)
deen = 3455
print(deen)
print(deen + ruth)
print(jerm + ruth)
print(Jerm + ruth)
print(umar)
print(um)
print()
print(deen)
print()
print(umar)
ruth = 5678
print(umar)
print(umar)
umar = 5000
print(umar)
joke = 9845
print(joke)
print(umar + joke)
marry = umar + joke
print(marry)
last_element <- numeric_vector[length(numeric_vector)]
numeric_vector <- c(1,2,3,4,5)
first_element <- numeric_vector[1]
last_element <- numeric_vector[length(numeric_vector)]
numeric_vector[3] <- 10
print(numeric_vector[3])
numeric_vector <- c(1,2,3,4,5,6)
numeric_vector <- c(1,2,3,4,5,8)
last_element <- numeric_vector[length(numeric_vector)]
matrix_data <- matrix(1:12, nrow = 3, ncol = 4)
element_23 <- matrix_data[2,3]
row_2 <- matrix_data[2,3]
col_3 <- matrix_data[,3]
print(matrix_data)
print(row_2)
print(col_3)
my_list <- list(numeric_vector,matrix_data, c("a","b","c"))
second_element <- my_list[[2]]
print(second_element)
df <- data.frame(
ID = c(1,2,3),
Name = c("Alice","Bob","Charlie"),
Age = c(25,30,35)
)
second_row <- df[2,]
ages <- df$Age
print(second_row)
print(df)
vect = c(1,2,3,4,5,6,7,8,9,10)
square = vect**2
print(square)
three <- matrix(1:10, nrow = 3, ncol = 3)
three <- matrix(1:12, nrow = 3, ncol = 3)
three <- matrix(1:9, nrow = 3, ncol = 3)
sum_of_elements = sum(three)
print(sum_of_elements)
listt <- list(c(1,2,3),three, data.frame(Gender,balance,address))
listt <- list(c(1,2,3),three, df)
print(listt)
pthree <- matrix(sample(1:10, 9), nrow = 3)
pthree <- matrix(sample(1:10, 9), nrow = 3)
print(pthree)
pthree <- matrix(sample(1:10, 9))
print(pthree)
pthree <- matrix(sample(1:10, 4))
print(pthree)
pthree <- matrix(sample(1:15, 4))
print(pthree)
pthree <- matrix(sample(1:15, 12))
print(pthree)
pthree <- matrix(sample(1:15, 12) nrow = 5)
pthree <- matrix(sample(1:15, 12), nrow = 5)
pthree <- matrix(sample(1:15, 12), nrow = 3)
print(pthree)
install.packages("readxl")
install.packages("readxl")
install.packages("readxl")
library(readxl)
my_excel_data <- read_excel("R/Dad's.xlsx")
my_data <- read.csv("R/managers.csv")
print(my_data)
write.csv(my_data,"output.csv", row.names = FALSE )
source("~/intro.R")
x < -10
x < -10
x <- 10
x <- 10
if(x > 0){
print("X is positive")
}else if (x < 0){
print("X is negative")
} else{
print("X is zero")
}
for(i in 1:5){
print(paste("Iteration:", i))
}
i <- 1
while (i <= 5) {
print(paste("iteration:", i))
i <- i+1
}
sum_even <- 0
for(i in 1:10){
if(i %% 2 == 0){
sum_even <- sum_even + i
}
}
print(sum_even)
iris_data = iris
str(iris_data)
write.csv(iris_data, "iris_data.csv" ,row.names = FALSE)
str(iris_data)
vector_numbers <- c(1:20)
for (i in vector_numbers){
if(i %% 2 == 0){
print("Even")
}
else{
print("odd")
}
}
add_numbers <- function(a,b){
sum <- a+b
return(sum)
}
result <- add_numbers(3,5)
print(result)
greet <- function(name = "World"){
message <- paste("Hello", name)
return(message)
}
print(greet("Alice"))
print(greet())
multiple_numbers <- function(x,y){
product <- x * y
return(product)
}
print(multiple_numbers(3,6))
factoral <- function(n){
math <- factorial(n)
return(math)
}
print(factoral(7))
mean_median <- function(vectorr){
vectorr <- c()
m <- mean(vectorr)
mn <- median(vectorr)
return(mean,median)
}
arrl <- mean_median(1,2,5,8,9,9,6,4)
arrl <- mean_median(c(1,2,3,4,5,6,7,8,9,4))
print(mean_median())
mean_median <- function(vectorr){
m <- mean(vectorr)
mn <- median(vectorr)
return(mean,median)
}
vectorr = (c(1,2,3,4,5,6,7,8,9,4))
arrl <- mean_median(vectorr)
vectorr = c(1,2,3,4,5,6,7,8,9,4)
arrl <- mean_median(vectorr)
vectorr <- c(1:20)
arrl <- mean_median(vectorr)
mean_median <- function(vectorr){
m <- mean(vectorr)
mn <- median(vectorr)
output <- list(mean = m, median = mn)
return(mean,median)
}
vectorr <- c(1:20)
arrl <- mean_median(vectorr)
mean_median <- function(vectorr){
m <- mean(vectorr)
mn <- median(vectorr)
output <- list(mean = m, median = mn)
return(output)
}
vectorr <- c(1:20)
arrl <- mean_median(vectorr)
print(arrl)
mean_median <- function(vectorr){
m <- mean(vectorr)
mn <- median(vectorr)
return(m)
return(mn)
}
vectorr <- c(1:20)
arrl <- mean_median(vectorr)
print(arrl)
vectorr <- c(1,4,5,67,88,9,00,5,7,8,9)
arrl <- mean_median(vectorr)
print(arrl)
mean_median <- function(vectorr){
m <- mean(vectorr)
mn <- median(vectorr)
output <- list(mean = m, median = mn)
return(output)
}
vectorr <- c(1,4,5,67,88,9,00,5,7,8,9)
arrl <- mean_median(vectorr)
print(arrl)
factoriall <- function(n){
if(n<0){
return("Factorial is not defined for negative numbers")
}
result <- 1
for(i in 1:n){
result <- result*i
}
return(result)
}
print(factoriall(5))
print(factoriall(0))
print(factoriall(0))
print(factoriall(-3))
mean_meddian <- function(x){
if(!is.numeric(x)){
return("input must be a numeric vector")
}
mean_value <- mean(x)
median_value <- median(x)
answer <- list(mean_value, median_value)
return(result)
}
numbers <- c(1,2,3,4,5,6,7,8,9)
print(mean_meddian(numbers))
mean_meddian <- function(x){
if(!is.numeric(x)){
return("input must be a numeric vector")
}
mean_value <- mean(x)
median_value <- median(x)
answer <- list(mean_value, median_value)
return(answer)
numbers <- c(1,2,3,4,5,6,7,8,9)
print(mean_meddian(numbers))
print(mean_meddian(numbers))
mean_meddian <- function(x){
if(!is.numeric(x)){
return("input must be a numeric vector")
}
mean_value <- mean(x)
median_value <- median(x)
answer <- list(mean_value, median_value)
return(answer)
}
numbers <- c(1,2,3,4,5,6,7,8,9)
print(mean_meddian(numbers))
mean_meddian <- function(x){
if(!is.numeric(x)){
return("input must be a numeric vector")
}
mean_value <- mean(x)
median_value <- median(x)
answer <- list(mean = mean_value, median = median_value)
return(answer)
}
numbers <- c(1,2,3,4,5,6,7,8,9)
print(mean_meddian(numbers))
mean_meddian <- function(x){
if(!is.numeric(x)){
return("input must be a numeric vector")
}
mean_value <- mean(x)
median_value <- median(x)
answer <- list(mean = mean_value, median = median_value)
return(answer)
}
mean_meddian <- function(x){
if(!is.numeric(x)){
return("input must be a numeric vector")
}
mean_value <- mean(x)
median_value <- median(x)
answer <- list(mean = mean_value, median = median_value)
return(answer)
}
numbers <- c(1,2,3,4,5,6,7,8,9)
solution <- mean_meddian(numbers)
print(solution)
print(factoriall(5))
print(factoriall(5))
factoriall <- function(n){
if(n<0){
return("Factorial is not defined for negative numbers")
}
result <- 1
for(i in 1:n){
result <- result*i
}
return(result)
}
factoriall <- function(n){
if(n<0){
return("Factorial is not defined for negative numbers")
}
result <- 1
for(i in 1:n){
result <- result*i
}
return(result)
}
print(factoriall(5))
mean_meddian <- function(x){
if(!is.numeric(x)){
return("input must be a numeric vector")
}
mean_value <- mean(x)
median_value <- median(x)
answer <- list(mean = mean_value, median = median_value)
return(answer)
}
# Using the function
numbers <- c(1,2,3,4,5,6,7,8,9)
solution <- mean_meddian(numbers)
print(solution)
mean_meddian <- function(x){
if(!is.numeric(x)){
return("input must be a numeric vector")
}
mean_value <- mean(x)
median_value <- median(x)
answer <- list(mean = mean_value, median = median_value)
return(answer)
}
# Using the function
numbers <- c(1,2,3,4,5,6,7,8,9)
solution <- mean_meddian(numbers)
print(solution)
mean_meddian <- function(x){
if(!is.numeric(x)){
return("input must be a numeric vector")
}
mean_value <- mean(x)
median_value <- median(x)
answer <- list(mean_value,median_value)
return(answer)
}
# Using the function
numbers <- c(1,2,3,4,5,6,7,8,9)
solution <- mean_meddian(numbers)
print(solution)
mean_meddian <- function(x){
if(!is.numeric(x)){
return("input must be a numeric vector")
}
mean_value <- mean(x)
median_value <- median(x)
answer <- list(mean = mean_value, median = median_value)
return(answer)
}
# Using the function
numbers <- c(1,2,3,r,a,g,7,8,w)
mean_meddian <- function(x){
if(!is.numeric(x)){
return("input must be a numeric vector")
}
mean_value <- mean(x)
median_value <- median(x)
answer <- list(mean = mean_value, median = median_value)
return(answer)
}
# Using the function
numbers <- c(r,a,g,,w)
mean_meddian <- function(x){
if(!is.numeric(x)){
return("input must be a numeric vector")
}
mean_value <- mean(x)
median_value <- median(x)
answer <- list(mean = mean_value, median = median_value)
return(answer)
}
# Using the function
numbers <- c(r,a,g,,w)
numbers <- c(r,a,g,w)
non_numeric <- c("s","e","h","g")
solution <- mean_meddian(non_numberic)
solution <- mean_meddian(non_numeric)
print(solution)
dataframe
dataframe <-  read.csv("R/managers.csv")
dataframe
to_seperate <- dataframe %>% seperate(to_date, c("Year" , "Month", "Day"), sep="-")
library(tidyverse)
to_seperate <- dataframe %>% seperate(to_date, c("Year" , "Month", "Day"), sep="-")
library(dplyr)
to_separate <- dataframe %>% separate(to_date, c("Year" , "Month", "Day"), sep="-")
to_separate
to_unite <- to_separate %>% unite(end_date,c("Year" , "Month", "Day"), sep="/")
to_unite
library(dplyr)
data("mtcars")
head(mtcars)
filtered_data <- mtcars %>% filter(mpg>20)
head(filtered_data)
selected_data <- mtcars %>% select(mpg,hp,wt)
selected_data <- mtcars %>% select(mpg,hp,wt)
head(selected_data)
mutated_data <- mtcars %>% mutate(hp_per_wt = hp/wt)
head(mutated_data)
summarized_data <- mtcars %>% summarise(avg_mpg = mean(mpg),max_hp = max(hp))
print(summarized_data)
#dplyr : summarize
arranged_data <- mtcars %>% arrange(desc(mpg)) %>% head()
print(arranged_data)
selected_filter <- mtcars %>% select(mpg , cyl ,gear) %>% filter(cyl = 6)
selected_filter <- mtcars %>% select(mpg , cyl ,gear) %>% filter(cyl == 6)
print(selected_filter)
lb = 0.453592
mtcars %>% mutate(wt_kg = wt*lb) %>% arrange(wt_kg) %>% head()
mtcars %>% group_by(cyl)
mtcars %>% group_by(cyl) %>% summarise(avg_mpg = mean(mpg),max_hp = max(hp))
library(tidyverse)
mtcars %>% data
glimpse(mtcars)
data <- mtcars
ggplot(data = mtcars, aes(x=wt, y = mpg)) + geom_point() +
labs(title = "scatter pilot of MPG vs.weight",
x = "weight(1000 lbs)",
y = "Miles per Gallon")
ggplot(data = mtcars, aes(x=wt, y = mpg)) + geom_point() +
labs(title = "scatter plot of MPG vs.weight",
x = "weight(1000 lbs)",
y = "Miles per Gallon")
ggplot(data = mtcars, aes(x = factor(cyl))) + geom_bar() +
labs(title = "Number of cars by cylinders",
x = "Number of cylinders",
y = "Count")
ggplot(data = mtcars, aes(x=mpg)) + geom_histogram(binwidth = 5)+
labs(title = "Histogram of MPG"),
ggplot(data = mtcars, aes(x=mpg)) + geom_histogram(binwidth = 5)+
labs(title = "Histogram of MPG",
x = "Miles per Gallon",
y = "frequency")
ggplot(data = mtcars, aes(x=hp, y= mpg))+ geom_point()+
geom_smooth(method = "lm", se = FALSE)+
labs(title = "Scatter plot of MPG vs. Horsepower with regression line",
x= "Horsepower",
y= "Miles per Gallon")
ggplot(data = mtcars , aes(x = factor(gear), fill = factor(cyl)))+
geom_bar()+
labs(title = "Number of cars by gear and cylinders",
x= "Number of Gears",
y = "Count",
fill = "Number of cylinders")
